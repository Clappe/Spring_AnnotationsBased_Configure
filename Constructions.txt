Spring 基于注解的配置

    1、基于注解的配置
        在 XML 注入之前进行注解注入，因此后者的配置将通过两种方式的属性连线被前者重写。

        注解连线在默认情况下在 Spring 容器中不打开。因此，在可以使用基于注解的连线之前，我们将需要在我们的 Spring 配置
        文件中启用它。

        让我们来看看几个重要的注解，并且了解它们是如何工作的：

         序号	                      注解 & 描述
           1	          @Required 注解应用于 bean 属性的 setter 方法。
           2              @Autowired 注解可以应用到 bean 属性的 setter 方法，非 setter 方法，构造函数和属性。
           3	          @Qualifier 通过指定确切的将被连线的 bean，@Autowired 和 @Qualifier 注解可以用来删除混乱。
           4	          JSR-250 Annotations Spring 支持 JSR-250 的基础的注解，其中包括了 @Resource，@PostConstruct 和 @PreDestroy 注解。

    2、Spring @Required 注释

        2.1 @Required 注释应用于 bean 属性的 setter 方法，它表明受影响的 bean 属性在配置时必须放在 XML 配置文件中，
            否则容器就会抛出一个 BeanInitializationException 异常。下面显示的是一个使用 @Required 注释的示例。

        2.2 创建ReqAnnotation_Student.java和ReqAnnotation_Main.java，编写相关代码并配置好bean，然后运行。
            其中,bean的配置如下：
                   <context:annotation-config/>
                    <!--define for student bean-->
                    <bean id="ReqAnnotation_Student" class="com.RequiredAnnotation.ReqAnnotation_Student">
                        <property name="name" value="Zara"/>
                        <!--Try without passing age and check the result(如果属性age没有配置，则会发生初始化异常)-->
                        <!--property name="age" value="11"/-->

                        <property name="age" value="11"/>
                    </bean>

    3、Spring @Autowired 注释

        3.1 Setter 方法中的 @Autowired（AutAnnotation_TextEditor.java、AutAnnotation_SpellChecker.java和AutAnnotation_Main.java）
            你可以在 XML 文件中的 setter 方法中使用 @Autowired 注释来除去 元素。当 Spring遇到一个在 setter 方法中使用
            的 @Autowired 注释，它会在方法中视图执行 byType 自动连接。

            3.1.1 bean的装配如下：
                <context:annotation-config></context:annotation-config>
                <bean id="AutAnnotation_SpellChecker" class="com.AutowiredAnnotation.AutAnnotation_SpellChecker"/>
                <bean id="AutAnnotation_TextEditor" class="com.AutowiredAnnotation.AutAnnotation_TextEditor">
                </bean>

        3.2 属性中的 @Autowired（AutAnnotation_TextEditor1.java和AutAnnotation_Main1.java）
            3.2.1 你可以在属性中使用 @Autowired 注释来除去 setter 方法。当时使用 为自动连接属性传递的时候，
                   Spring 会将这些传递过来的值或者引用自动分配给那些属性。此时可以不写setter方法。

        3.3 构造函数中的 @Autowired(AutAnnotation_TextEditor3.java和AutAnnotation_Main3.java)
            3.3.1 你也可以在构造函数中使用 @Autowired。一个构造函数 @Autowired 说明当创建 bean 时，即使在 XML 文件中
                  没有使用 元素配置 bean ，构造函数也会被自动连接.

        3.4 @Autowired 的（required=false）选项(AutAnnotation_Student.java和AutAnnotation_Stu_Main.java)
            3.4.1 默认情况下，@Autowired 注释意味着依赖是必须的，它类似于 @Required 注释，然而，你可以使用 @Autowired
             的 （required=false） 选项关闭默认行为。

             即使你不为 age 属性传递任何参数，下面的示例也会成功运行，但是对于 name 属性则需要一个参数。

             3.4.2 bean的配置如下：
                    <context:annotation-config></context:annotation-config>
                    <bean id="AutAnnotation_Student" class="com.AutowiredAnnotation.AutAnnotation_Student">
                        <property name="name" value="Zara"/>
                    </bean>

    4、Spring @Qualifier 注释（QuaAnnotation_Student.java、QuaProfile.java、QuaMain.java）

        4.1 可能会有这样一种情况，当你创建多个具有相同类型的 bean 时，并且想要用一个属性只为它们其中的一个进行装配，
            在这种情况下，你可以使用 @Qualifier 注释和 @Autowired 注释通过指定哪一个真正的 bean 将会被装配来消除混乱。

        4.2 在QuaProfile类的声明中，成员变量student用@Qualifier("student1")声明对象是student1,因此会寻找bean配置中student1
            的配置。
            @Autowired
            @Qualifier("student1")
            private QuaAnnotation_Student student;

        4.3 在xml文件中，可以为QuaAnnotation_Student类配置两个bean(student1和student2)
                <!--defination for student1 bean-->
                <bean id="student1" class="com.QualifierAnnotation.QuaAnnotation_Student">
                    <property name="name" value="Zara"/>
                    <property name="age" value="11"/>
                </bean>

                <!--defination for student2 bean-->
                <bean id="student2" class="com.QualifierAnnotation.QuaAnnotation_Student">
                    <property name="name" value="Swift"/>
                    <property name="age" value="20"/>
                </bean>

    5、Spring 基于 Java 的配置

        5.1 @Configuration 和 @Bean 注解（JavaBased_HelloWorld.java和JavaBased_HelloWorldConfig.java、JavaBased_Main.java）
            带有 @Configuration 的注解类表示这个类可以使用 Spring IoC 容器作为 bean 定义的来源。@Bean 注解告诉 Spring，
             一个带有 @Bean 的注解方法将返回一个对象，该对象应该被注册为在 Spring 应用程序上下文中的 bean。

        5.2 注入 Bean 的依赖性(JavaBased_SpellChecker.java、JavaBased_TextEditor.java、JavaBased_TextEditorConfig.java、JavaBased_TextEditor_Main.java)
            当 @Beans 依赖对方时，表达这种依赖性非常简单，只要有一个 bean 方法调用另一个.

        5.3 @Import 注解
            @import 注解允许从另一个配置类中加载 @Bean 定义。考虑 ConfigA 类，如下所示：

            @Configuration
            public class ConfigA {
               @Bean
               public A a() {
                  return new A();
               }
            }
            你可以在另一个 Bean 声明中导入上述 Bean 声明，如下所示：

            @Configuration
            @Import(ConfigA.class)
            public class ConfigB {
               @Bean
               public B a() {
                  return new A();
               }
            }
            现在，当实例化上下文时，不需要同时指定 ConfigA.class 和 ConfigB.class，只有 ConfigB 类需要提供，如下所示：

            public static void main(String[] args) {
               ApplicationContext ctx =
               new AnnotationConfigApplicationContext(ConfigB.class);
               // now both beans A and B will be available...
               A a = ctx.getBean(A.class);
               B b = ctx.getBean(B.class);
            }

        5.4 生命周期回调
            @Bean 注解支持指定任意的初始化和销毁的回调方法，就像在 bean 元素中 Spring 的 XML 的初始化方法和销毁方法的属性：

            public class Foo {
               public void init() {
                  // initialization logic
               }
               public void cleanup() {
                  // destruction logic
               }
            }

            @Configuration
            public class AppConfig {
               @Bean(initMethod = "init", destroyMethod = "cleanup" )
               public Foo foo() {
                  return new Foo();
               }
            }
            指定 Bean 的范围：

            默认范围是单实例，但是你可以重写带有 @Scope 注解的该方法，如下所示：

            @Configuration
            public class AppConfig {
               @Bean
               @Scope("prototype")
               public Foo foo() {
                  return new Foo();
               }
            }

